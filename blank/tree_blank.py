from typing import Optional, Any
from collections import deque


class Node:
    def __init__(self, val: Any, left: 'Optional[Node]' = None, right: 'Optional[Node]' = None):
        self.val = val
        self.left = left
        self.right = right


# --- Tree Creation ---
def perfect():...
def full():...
def complete():...


# --- Serialization ---
def serialize():...
def deserialize():...


# --- Tree Traversals & Views ---
def bfs():...
def preorder_dfs():...
def inorder_dfs():...
def postorder_dfs():...
def right_view():...
def left_view():...
def top_view():...
def bottom_view():...


# --- Tree Properties & Checks ---
def height():...
def is_same_tree():...
def is_symmetrical():...
def is_valid_bst():...
def is_subtree():...


# --- Classic Tree Problems ---
def invert():...
def lowest_common_ancestor():...
def max_depth():...
def diameter_of_binary_tree():...
def max_path_sum():...
def has_path_sum():...


# --- Advanced Trees (Conceptual) ---
def avl():...
def b_tree():...
def red_black_tree():...